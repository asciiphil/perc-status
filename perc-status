#!/usr/bin/env python

import math
import optparse
import re
import sys
import subprocess

ATTR_GLOBAL_HS    = 1<<7
ATTR_DEDICATED_HS = 1<<8

try:
    import xml.etree.ElementTree as ET
except ImportError:
    import elementtree.ElementTree as ET

option_parser = optparse.OptionParser()
option_parser.add_option('-r', '--omreport', default='omreport',
                         help='Location of the omreport program, if not in $PATH.')
option_parser.add_option('-c', '--controller', type='int',
                         help='Specific controller number to query.  Default is all controllers.')
(options, args) = option_parser.parse_args()

def bin_str(x, count=0):
    """ Returns a string containing the binary representation of the given
    integer.  COUNT represents the number of digits that should be in the
    output.  If omitted, as few digits will be used as possible."""
    if count == 0:
        count = int(math.log(x, 2)) + 1
    return ''.join(map(lambda y:str((x>>y)&1), xrange(count - 1, -1, -1)))

def human_size(bytes):
    suffixes = ['B  ', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
    size = float(bytes)
    for s in suffixes:
        if size < 1024:
            return '%.2f %s' % (size, s)
        size /= 1024
    return '%.2f %s' % (size * 1024, suffixes[-1])
    
# Use the type information in the XML to turn some of the values into Python
# typed values.
def get_field(obj, fieldname):
    f = obj.find(fieldname)
    if f == None:
        return None
    if f.attrib['type'] in ['u32', 'u64']:
        if re.search('Mask$', fieldname):
            return int(f.text, 2)
        else:
            return int(f.text)
    if f.attrib['type'] == 'astring':
        return f.text.decode('string_escape')
    return f.text

# There are several things in the XML that are represented essentially as
# C-style enums; each distinct integer value carries a different meaning.
# (Rather than being successive integers, they appear to be successive
# powers of 2, but that's an implementation detail.)  This function lets us
# create classes for those enums that simply associate more readable names
# with the integer values.
def EnumClass(names):
    class enum:
        def __init__(self, layout_id):
            self.id = layout_id
            if self.id in names:
                self.name = names[self.id]
            else:
                self.name = 'Unknown (%s)' % self.id
    return enum

# The following enum mappings are based almost entirely on direct experience
# rather than any sort of documentation from Dell.  As such, there are gaps
# in the values because we simply haven't seen those values in practice yet.
VDLayout = EnumClass({
        4:      'RAID-1',
        64:     'RAID-5',
        128:    'RAID-6',
        262144: 'RAID-60',
    })
State = EnumClass({
        1:                'Ready',
        2:                'Failed',
        4:                'Online',
        8:                'Offline',
        32:               'Degraded',
        4096:             'Non-RAID',
        2097152:          'Replacing',
        8388608:          'Rebuilding',
        274877906944:     'Foreign',
        549755813888:     'Clear',
        9007199254740992: 'Degraded Redundancy',
    })
Status = EnumClass({
        2: 'Ok',
        3: 'Non-Critical',
        4: 'Critical',
    })

class Controller:
    def __init__(self, storage_object, controllers):
        assert(769 == get_field(storage_object, 'ObjType'))
        self.state  = State(get_field(storage_object, 'ObjState'))
        self.status = Status(get_field(storage_object, 'ObjStatus'))
        self.attributes_mask = get_field(storage_object, 'AttributesMask')
        self.name            = get_field(storage_object, 'Name'          )
        self.controller_num  = get_field(storage_object, 'ControllerNum' )

        self.vdisks = []
        self.pdisks = []

        controllers[self.id] = self

    def __repr__(self):
        return '<Controller(%s)>' % self.id

    def __cmp__(self, other):
        return cmp(self.controller_num, other.controller_num)

    @property
    def id(self):
        return self.controller_num

class VDisk:
    def __init__(self, storage_object, controller_num, controllers, vdisks):
        assert(773 == get_field(storage_object, 'ObjType'))
        self.state  = State(get_field(storage_object, 'ObjState'))
        self.status = Status(get_field(storage_object, 'ObjStatus'))
        self.attributes_mask = get_field(storage_object, 'AttributesMask')
        self.name            = get_field(storage_object, 'Name'          )
        self.controller_num  = controller_num
        self.device_name     = get_field(storage_object, 'DeviceName'    )

        self.array_num       = get_field(storage_object, 'ArrayNum'      )
        self.logical_drive_num = get_field(storage_object, 'LogicalDriveNum')
        self.parent_vd_id    = get_field(storage_object, 'ParentVDID'    )
        self.span_num        = get_field(storage_object, 'SpanNum'       )
        self.length          = get_field(storage_object, 'Length'        )

        self.layout = VDLayout(get_field(storage_object, 'Layout'))

        self.controller = controllers[self.controller_num]
        self.controller.vdisks.append(self)

        self.parent = None
        self.children = {}
        for vd in vdisks.values():
            if self.parent_vd_id != None and \
                    vd.controller_num == self.controller_num and \
                    vd.logical_drive_num == self.parent_vd_id:
                # This vdisk is our parent.
                self.parent = vd
                vd.children[self.array_num] = self
            elif vd.parent_vd_id != None and \
                    self.controller_num == vd.controller_num and \
                    self.logical_drive_num == vd.parent_vd_id:
                # This vdisk is our child.
                vd.parent = self
                self.children[vd.array_num] = vd
        self.pdisks = []

        vdisks[self.id] = self

    def __cmp__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        r = cmp(self.controller_num, other.controller_num)
        if r != 0:
            return r
        return cmp(self.logical_drive_num, other.logical_drive_num)

    @property
    def id(self):
        return '%s;%s' % (self.controller_num, self.logical_drive_num)
        
    @property
    def display_id(self):
        return '%s' % (self.logical_drive_num)

    @property
    def is_parent(self):
        return len(self.children) > 0

    @property
    def is_child(self):
        return self.parent != None

    def add_pdisk(self, storage_object, pdisks):
        key = '%s;%s:%s:%s' % (get_field(storage_object, 'ControllerNum'),
                               get_field(storage_object, 'Channel'),
                               get_field(storage_object, 'EnclosureID'),
                               get_field(storage_object, 'TargetID'))
        pdisk = pdisks[key]
        if len(self.children) > 0 and pdisk.array_num != None:
            pdisk.vdisk = self.children[pdisk.array_num]
        else:
            pdisk.vdisk = self
        pdisk.vdisk.pdisks.append(pdisk)
    

class PDisk:
    def __init__(self, storage_object, controllers, pdisks):
        assert(772 == get_field(storage_object, 'ObjType'))
        self.state  = State(get_field(storage_object, 'ObjState'))
        self.status = Status(get_field(storage_object, 'ObjStatus'))
        self.controller_num  = get_field(storage_object, 'ControllerNum' )
        self.channel         = get_field(storage_object, 'Channel'       )
        self.enclosure_id    = get_field(storage_object, 'EnclosureID'   )
        self.target_id       = get_field(storage_object, 'TargetID'      )
        self.array_num       = get_field(storage_object, 'ArrayNum'      )
        self.device_id       = get_field(storage_object, 'DeviceID'      )
        self.nexus           = get_field(storage_object, 'Nexus'         )
        self.attributes_mask = get_field(storage_object, 'AttributesMask')
        self.product_id      = get_field(storage_object, 'ProductID'     )
        self.device_serial_number = get_field(storage_object, 'DeviceSerialNumber')
        self.sas_address     = get_field(storage_object, 'SASAddress'    )
        self.bus_protocol    = get_field(storage_object, 'BusProtocol'   )
        self.enclosure_index = get_field(storage_object, 'EnclosureIndex')
        self.num_of_associated_vd = get_field(storage_object, 'NumOfAssociatedVD')
        self.progress        = get_field(storage_object, 'Progress'      )
        self.length          = get_field(storage_object, 'Length'        )

        self.controller = controllers[self.controller_num]
        self.controller.pdisks.append(self)

        self.vdisk = None

        pdisks[self.id] = self

    def __repr__(self):
        return '<Disk(%s)>' % self.id

    def __cmp__(self, other):
        r = cmp(self.controller_num, other.controller_num)
        if r != 0:
            return r
        r = cmp(self.channel, other.channel)
        if r != 0:
            return r
        r = cmp(self.enclosure_id, other.enclosure_id)
        if r != 0:
            return r
        return cmp(self.target_id, other.target_id)

    @property
    def id(self):
        return '%s;%s:%s:%s' % (self.controller_num, self.channel, self.enclosure_id, self.target_id)

    @property
    def display_id(self):
        return '%s:%s:%s' % (self.channel, self.enclosure_id, self.target_id)

    @property
    def is_global_hs(self):
        return self.attributes_mask & ATTR_GLOBAL_HS > 0

    @property
    def is_dedicated_hs(self):
        return self.attributes_mask & ATTR_DEDICATED_HS > 0

# See how many controllers we have.
controllers = {}
omr = subprocess.Popen([options.omreport, 'storage', 'controller', '-fmt', 'xml'],
                       stdout=subprocess.PIPE)
stdout, ignored = omr.communicate()
root = ET.fromstring(stdout)
for obj in root.find('Controllers').findall('DCStorageObject'):
    if options.controller:
        if options.controller == get_field(obj, 'ControllerNum'):
            Controller(obj, controllers)
    else:
        Controller(obj, controllers)

if len(controllers) == 0:
    print >>sys.stdout, 'No controllers found!'
    sys.exit(1)

# Get all of the virtual disks accross all controllers
vdisks = {}
for controller in controllers.values():
    omr = subprocess.Popen([options.omreport, 'storage', 'vdisk', 'controller=%d' % controller.controller_num, '-fmt', 'xml'],
                           stdout=subprocess.PIPE)
    stdout, ignored = omr.communicate()
    root = ET.fromstring(stdout)
    et_virtual_disks = root.find('VirtualDisks')
    if et_virtual_disks is not None:
        for obj in et_virtual_disks.findall('DCStorageObject'):
            VDisk(obj, controller.controller_num, controllers, vdisks)

# Get all of the disks across all of the controllers.
pdisks = {}
for controller in controllers.values():
    omr = subprocess.Popen([options.omreport, 'storage', 'controller', 'controller=%d' % controller.controller_num, '-fmt', 'xml'],
                           stdout=subprocess.PIPE)
    stdout, ignored = omr.communicate()
    root = ET.fromstring(stdout)
    et_array_disks = root.find('ArrayDisks')
    if et_array_disks is not None:
        for obj in et_array_disks.findall('DCStorageObject'):
            PDisk(obj, controllers, pdisks)

disk_list = sorted(pdisks.values())

# Assign pdisks to vdisks.
for vdisk in vdisks.values():
    if not vdisk.is_child:
        omr = subprocess.Popen([options.omreport, 'storage', 'pdisk', 'controller=%d' % vdisk.controller_num, 'vdisk=%d' % vdisk.logical_drive_num, '-fmt', 'xml'],
                               stdout=subprocess.PIPE)
        stdout, ignored = omr.communicate()
        root = ET.fromstring(stdout)
        for obj in root.find('ArrayDisks').findall('DCStorageObject'):
            vdisk.add_pdisk(obj, pdisks)

max_indent = 3
for vd in vdisks.values():
    if vd.is_parent:
        max_indent = 4
id_width = max(max([len(pd.display_id) for pd in pdisks.values()]),
               max([len(vd.layout.name) for vd in vdisks.values() if not vd.is_child]))
state_width = max(max([len(pd.state.name) for pd in pdisks.values()]),
                  max([len(vd.state.name) for vd in vdisks.values() if not vd.is_child]))
status_width = max(max([len(pd.status.name) for pd in pdisks.values()]),
                   max([len(vd.status.name) for vd in vdisks.values() if not vd.is_child]))
size_length = max(max([len(human_size(pd.length)) for pd in pdisks.values()]),
                  max([len(human_size(vd.length)) for vd in vdisks.values() if not vd.is_child]))
def print_pds(indent, pds, prefix=None):
    prefix_printed = False
    for pd in sorted(pds):
        if prefix and not prefix_printed:
            print '%s%s' % ('  ' * (indent - 1), prefix)
            prefix_printed = True
        extra_info = ''
        if pd.progress != None:
            extra_info += '  %d%%' % pd.progress
        print '%s%s  %s  %s  %s%s' % ('  ' * indent,
                                      pd.display_id.ljust(id_width + 2 * (max_indent - indent)),
                                      pd.state.name.ljust(state_width),
                                      pd.status.name.ljust(status_width),
                                      human_size(pd.length).rjust(size_length),
                                      extra_info)

for c in sorted(controllers.values()):
    print '%s (%s)  %s  %s' % (c.name, c.id, c.state.name, c.status.name)
    for vd in sorted(c.vdisks):
        if vd.parent:
            continue
        print '  %s (%s) at %s' % (vd.name, vd.display_id, vd.device_name)
        print '    %s  %s  %s  %s' % (vd.layout.name.ljust(id_width + 2 * (max_indent - 2)),
                                      vd.state.name.ljust(state_width),
                                      vd.status.name.ljust(status_width),
                                      human_size(vd.length).rjust(size_length))
        if vd.is_parent:
            for vdc in [vd.children[id] for id in sorted(vd.children.keys())]:
                print_pds(4, [pd for pd in vdc.pdisks if not pd.is_dedicated_hs],
                          'Span %s' % vdc.span_num)
        else:
            print_pds(3, [pd for pd in vd.pdisks if not pd.is_dedicated_hs])
        print_pds(3, [pd for pd in vd.pdisks if pd.is_dedicated_hs], 'Spares')
    print_pds(2, [pd for pd in c.pdisks if pd.is_global_hs], 'Global Spares')
    print_pds(2, [pd for pd in c.pdisks if pd.vdisk == None and not pd.is_global_hs],
              'Unused')
    print

### Debugging stuff
#labels = ['Controller', 'Channel', 'Enclosure ID', 'Target ID', 'State', 'Array Num', 'Device ID', 'Status', 'Bus Protocol', 'Enclosure Index', 'Assoc. VD']
#label_len = max([len(l) for l in labels])
#
#def get_column(disk):
#    return [str(v) for v in [d.controller_num, d.channel, d.enclosure_id, d.target_id, d.obj_state, d.array_num, d.device_id, d.obj_status, d.bus_protocol, d.enclosure_index, d.num_of_associated_vd]]
#
#columns = []
#lens = []
#for d in disk_list:
#    columns.append(get_column(d))
#    lens.append(max([len(f) for f in columns[-1]]))
#
#for i in xrange(0, len(labels)):
#    print labels[i].ljust(label_len),
#    for j in xrange(0, len(columns)):
#        print columns[j][i].rjust(lens[j]),
#    print
#
#print
#
## For showing attribute masks
#id_len = max([len(d.id) for d in disk_list])
#attr_len = max([int(math.log(d.attributes_mask, 2)) + 1 for d in disk_list])
#print 'Attributes'
#for d in disk_list:
#    print d.id.ljust(id_len), bin_str(d.attributes_mask, attr_len)
#
#print

